/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signals1.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import org.apache.commons.math3.complex.Complex;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.Range;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import signals1.discreteSignals.abstracts.DiscreteSignal;

/**
 *
 * @author marr
 */
public abstract class OutputPanel extends javax.swing.JPanel {

    private static final String AMPLITUDE = "amplituda";
    private static final String TIME = "czas";
    private static final Shape CIRCLESMALL = new Ellipse2D.Double(2, 2, 2, 2);
    private final int chartDimensionX = 1150;
    private final int chartDimensionY = 350;
    protected String realTitle = "składowa urojona";
    protected String imgTitle = "składowa rzeczywista";
    
    protected ChartPanel realChart;
    protected ChartPanel imgChart;

    /**
     * Creates new form AmplitudePanel
     */
    public OutputPanel(DiscreteSignal signal) {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelReal = new javax.swing.JPanel();
        jPanelImg = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1200, 810));

        jPanelReal.setPreferredSize(new java.awt.Dimension(1150, 400));

        javax.swing.GroupLayout jPanelRealLayout = new javax.swing.GroupLayout(jPanelReal);
        jPanelReal.setLayout(jPanelRealLayout);
        jPanelRealLayout.setHorizontalGroup(
            jPanelRealLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        jPanelRealLayout.setVerticalGroup(
            jPanelRealLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 387, Short.MAX_VALUE)
        );

        jPanelImg.setPreferredSize(new java.awt.Dimension(1150, 400));

        javax.swing.GroupLayout jPanelImgLayout = new javax.swing.GroupLayout(jPanelImg);
        jPanelImg.setLayout(jPanelImgLayout);
        jPanelImgLayout.setHorizontalGroup(
            jPanelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        jPanelImgLayout.setVerticalGroup(
            jPanelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelReal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanelReal, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelImg, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

   
    protected ChartPanel getScatterPlot(Complex[] values, boolean isReal, double startTime, int samplingRate) {
        String title = realTitle;
        if (!isReal) {
            title = imgTitle;
        }

        JFreeChart chart = ChartFactory.createScatterPlot(title, TIME, AMPLITUDE, createDataset(values, isReal, startTime, title, samplingRate));
        XYPlot xyPlot = (XYPlot) chart.getPlot();
        XYItemRenderer renderer = xyPlot.getRenderer();
        renderer.setSeriesShape(0, CIRCLESMALL);
        renderer.setSeriesPaint(0, Color.RED);
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(chartDimensionX, chartDimensionY));
        return chartPanel;
    }

    protected final ChartPanel getChart(Complex[] values, boolean isReal, double startTime, int samplingRate) {
        String title = realTitle;
        if (!isReal) {
            title = imgTitle;
        }

        JFreeChart chart = ChartFactory.createXYLineChart(title, TIME, AMPLITUDE,
                createDataset(values, isReal, startTime, title, samplingRate));
        NumberAxis xAxis = new NumberAxis();
        xAxis.setTickUnit(new NumberTickUnit(1));
        chart.getXYPlot().getRenderer().setSeriesStroke(0, new BasicStroke(0.1f));
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(chartDimensionX, chartDimensionY));
        return chartPanel;
    }

    protected XYSeriesCollection createDataset(Complex[] values, boolean isReal, double startTime, String title, int samplingRate) {
        XYSeries series = new XYSeries(title);
        int i = 0;
        double x;
        double y;
        for (Complex v : values) {
            if (isReal) {
                y = v.getReal();
            } else {
                y = v.getImaginary();
            }
            x = i + (startTime * samplingRate);
            series.add(x / samplingRate, y);
            i++;
        }
        return new XYSeriesCollection(series);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel jPanelImg;
    protected javax.swing.JPanel jPanelReal;
    // End of variables declaration//GEN-END:variables
}
